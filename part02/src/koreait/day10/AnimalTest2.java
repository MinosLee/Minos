package koreait.day10;

import koreait.day09a.Animal;
import koreait.day09a.Crow;
import koreait.day09a.Dog;

public class AnimalTest2 {

	public static void main(String[] args) {
		Animal ani1 = new Frog(); // 업캐스팅- 부모가 참조하는 캐스팅 : 자동변환 되는 캐스팅임
		Animal ani2 = new Cat(); // - 반대로 다운캐스팅도 존재함. 강제변환 필요

		Dog puddle = new Dog();
		Crow crow = new Crow();
		Dog dog = new Dog();

		System.out.println("::::::::::");

		animal(ani1);
//		animal(ani2);
//		animal(puddle);
//		animal(crow);
//		animal(new Frog());

	}

	// 다형성
	// 예시 1) 메소드 인자(또는 리턴) 타입이 Animal : Animal, Dog, Crow, Frog, Cat 객체 모두 가능.
	public static void animal(Animal animal) {

		// 구현예시2 : 메소드 재정의. animal 객체 인스턴스 타입에 따라 실행되는 act가 다름.
		animal.act();

		animal.print();
		// 인자로 전달받은 animal 객체가 참조하는 것의 진짜 타입(인스턴스 타입) 검사 : instanceof
		System.out.println("dog ?" + (animal instanceof Dog));
		System.out.println("Crow ?" + (animal instanceof Crow));
		System.out.println("Frog ?" + (animal instanceof Frog));
		System.out.println("Cat ?" + (animal instanceof Cat));

		/*
		 * Animal 부모타입 참조는 자식클래스 필드와 메소드에 접근 못함. 다운캐스팅필요 animal.jump(); animal.run();
		 * animal.fly(); animal.sound();
		 */

		Cat cat;
		Dog dog;
		Frog frog;
		Crow crow;
		if (animal instanceof Cat) {
			cat = (Cat) animal; // 다운캐스팅 : animal 진짜 객체에 따라 오류 또는 오류없음이 뜸. -> instanceof 조건식 필요
			cat.sound();
		}
		if (animal instanceof Dog) {
			dog = (Dog) animal;
			dog.run();
		}
		if (animal instanceof Frog) {
			frog = (Frog) animal;
			frog.jump();
		}
		if (animal instanceof Crow) {
			crow = (Crow) animal;
			crow.fly();
		}

	}

}

class Frog extends Animal { // 개구리

	protected String mouth; // 디폴트 한정자+ 다른 패키지 자식클래스

	public Frog() {
		System.out.println("새로운 동물가족은 Frog입니다.");
	}

	public void jump() {
		setName("개구리");
		setColor("초록");
		System.out.println("특징 : 점핑");
	}

	// 다형성 구현 : 메소드 오버라이드 *비교: 오버로딩(overloading)과 다름
	// ㄴ 부모클래스의 메소드를 재정의하는 것임. 이 때 인자와 리턴타입은 동일하게 함.
	@Override // annotation이라고 부름
	public void act() {
		// super.act(); //부모클래스의 액트를 부름.
		System.out.println("Animal 행동 : 수시로 점핑하기");
	}

}

class Cat extends Animal {

	protected String eyes;

	public Cat() {
		System.out.println("새로운 동물가족은 Cat입니다.");
	}

	public void sound() {
		setName("고양이");
		setColor("하얀색");
		System.out.println("특징 : 야옹야옹");
	}

	@Override
	public void act() {
		// super.act();
		System.out.println("Animal 행동 : 수시로 야옹야옹 울기");
	}

}
